TO DO
>>> Le dashboard web de Kubernetes. Celui-ci est utile pour gérer votre cluster.
>>> L’objet metallb qui gère l’accès externe aux services dans un cluster.
>>> Un serveur Nginx ouvert sur les ports 80
>>> Nginx redirige automatiquement tous les 80 sur le 443 en ssl
• Un serveur FTPS ouvert sur le port 21.
>>> Un wordpress ouvert sur le port 5050, fonctionnant avec une base de donnée
Mysql. Les deux devront être dans deux containers distincts. Le wordpress devra
comporter plusieurs utilisateurs et un administrateur.
>>> Phpmyadmin, tournant sur le port 5000 et relié a la base de donnée MySQL.
• Un grafana, accessible sur le port 3000, fonctionnant avec une base de donnée
influxDB. Celui-ci devra vous permettre de monitorer tous vos containers. Les
deux devront aussi être dans deux containers distincts. Vous devrez créer un dashboard par container.
>>> En cas de crash ou d’arrêt d’un des deux containers de base de données, vous
devrez vous assurer que celles-ci puissent persister et ne soient pas perdu. En cas
de suppression, les volumes où la data est sauvegardée doivent persister.
>>> Vous devrez vous assurer de pouvoir accéder a votre Nginx en connexion SSH
• Chacun de vos containers devra pouvoir redémarrer automatiquement en cas de
crash ou d’arrêt >> penser a mettre 2 replicas


> FONCTIONNEMENT GENERAL 

On a dans chaque nod (= une machine), des pods qui contiennent un container (de preference juste un)
les podes ont une adresse ip propre et qui s'applique au container mais qui change a chaque fois
que le pod est recréé.

Les pods sont liés à des services qui eux ont une adresse ip permanente. L'ingress fait le lien avec
les demandes (genre l'url etc) et reroute sur les services correspondants. Ingress est dupliqué en
pod sur chaque nod et fait du load balancing. Il adresse au bon service qui fera du load balancing
en adressant au bon replica.

On peut avoir plusieurs versions d'un pod (= le nombre de replica), mais un seul service pour x replica.
Le service fait aussi du load balancing en adressant les différentes requetes aux pods ayant la moins
grosse charge de travail.

On a aussi le ConfigMap et le Secret qui contiennent les varaibles d'environnement. ConfigMap c'est tout
ce qui est sans risque (ex : noms de domaine), secret c'est tout ce qui est vulnerable (mdp et logins par ex).

Les podes sont reliés à des volumes qui eux font le lien avec le stockage (DD, cloud...) K8s ne s'occupent
pas du stockage ça ne répond pas de lui

On a aussi le deployement (stateless pods) et le statefulset (statefull pods) qui permettent de gerer l'ensemble
des replicas etc. On travaille avec ces 2 modules et on leur indique le nb de replicas que l'on attend d'un certain
pods. On peut aussi leur dire de scale up ou down les pods. C'est une sorte de couche d'abstraction au dessus des pods.
La diff avec statefulset et qu'il gere en plus le cas des bdd etc pour coordonner les pods qui
access la bdd et qu'ils ecrivent les uns à la suite des autres pour qu'il n'y ait pas d'inconsistence dans la base de
données.

> COMPOSANTS TECHNIQUES
NOD : on doit avoir 3 processus :
tech container (ex : docker), kubelet qui permet de run les pods en utilisant la tech container installée,
et kube-proxy qui permet de faire de l'adressage intelligent et du load balancing (il est donc utilisé
dans les services)

MASTER : 4 processus :
API server qui est l'interface de programmation et permet au client d'interargir avec le master (via dashboard
ou kubectl). Le scheduler va analyser les nodes et va faire une requete au kubelet du nod le moins chargé pour que
celui-ci run le pod. Le scheduler fait donc juste le choix du nod, ce n'est pas lui qui run le pod c'est le kubelet.
Controller manager lui check le statut du cluster et si un node ou pode meurt, il va alors tout faire pour revenir à l'état
normal du cluster en demandant au scheduler de rescheduler tous les podes morts. ETCD est le dernier process et est
le cerveau du cluster : c'est une bdd contenant toutes les infos sur les podes nodes etc. C'est sur lui que s'appuie 
les 3 autres process pour remplir leur role. Attention completement differents des bdd dans les pods pour les applis.

-------------------------------- COMMANDES MINIKUBE --------------------------------------------

# pour lancer minikube et creer un noeud virtuel a la fois master et worker
minikube start

# pour kill le cluster et supprimer tout
minikube delete

# etat du cluster kubernetes
minikube status

# permet d'avoir la liste des nodes 
kubectl get nodes

# permet de se connecter au noeud minikube (sur la vm)
minikube ssh

# ouvre une page internet avec le panneau de controle du cluster
minikube dashboard

# Arrêter un cluster Kubernetes en cours d'exécution
minikube stop 

# donner une adresse ip a un service pour pouvoir y accéder
minikube service "service-name"

# active ingress dans minikube
minikube addons enable ingress

-------------------------------- COMMANDES KUBECTL --------------------------------------------
# Permet d'avoir le status d'un type d'objet
kubectl get []

# permet de creer un type d'objet
kubectl create

# edit un objet
kubectl edit

# rentrer dans le terminal d'un pod
kubectl exec -it [POD NAME] -- bin/bash

# ouvrir un port
$ kubectl run my-app --image=gcr.io/some-repo/my-app:v1 --port=3000

# link le port d'un pod sur le port de l'ordi pour test sur le localhost
kubectl port-forward <your-pod-name> <local-port>:<your-app-port>

-------------------------------- RUN DES DOCKERFILE DANS K8S --------------------------------------------
eval $(minikube docker-env)
https://stackoverflow.com/questions/40144138/pull-a-local-image-to-run-a-pod-in-kubernetes

-------------------------------- RAJOUTER UN DNS  --------------------------------------------
editer le fichier : /etc/hosts en sudo

-------------------------------- PROPRE A ALPINE --------------------------------------------
-> $ docker exec -it <container name> /bin/sh
pour rentrer dans le terminal d'alpine (fonctionne avec sh et non bash)


-------------------------------- ORDRE BUILD SETUP.SH --------------------------------------------
minikube start 
connecter docker a env minikube
peut etre lancer une fois le dashboard avec minikube pour creer le namespace ?
qpply mysql
apply Phpmyadmin (avant nginx sinon nginx bug car un service manque)
apply nginx

-------------------------------- METALLB --------------------------------------------
https://medium.com/@shoaib_masood/metallb-network-loadbalancer-minikube-335d846dfdbe
https://medium.com/faun/metallb-configuration-in-minikube-to-enable-kubernetes-service-of-type-loadbalancer-9559739787df
minikube addons enable metallb >> pour activer
minikube addons list >> pour lister

-------------------------------- DASHBOARD --------------------------------------------
minikube addons enable dashboard >> permet de creer le namespace pour le dashboard
puis creer un external service dans ce namespace

-------------------------------- NGINX --------------------------------------------
# pour pouvoir utiliser la commande nginx
mkdir -p /run/nginx

# pour pouvoir utiliser un gestionnaire de service
r
openrc -s nginx start
# POUR LE DOCKERFILE >>
VOLUME [ “/sys/fs/cgroup” ]
>>> apparemment openrc inutile pour l'instant

# il faut demarrer nginx en l'appelant
nginx
>> bug parfois meme si bien appelé dans le script pourtant. Il faut desfois le relancer en entrant dans
le container

# comprendre les regex avec nginx
https://www.nginx.com/blog/regular-expression-tester-nginx/

# guide nginx
http://nginx.org/en/docs/beginners_guide.html#:~:text=The%20way%20nginx%20and%20its,%2Flocal%2Fetc%2Fnginx%20.

# explication de comment marche le proxing entre nginx et php-fpm
https://serverfault.com/questions/856640/nginx-not-serving-css-correctly-in-simple-php-project

# proxypass >> pour reverse proxy sur nginx
# fastcgipass >> pour reverse proxy sur php-fpm

# comprendre le proxypass de nginx
https://www.digitalocean.com/community/tutorials/understanding-nginx-http-proxying-load-balancing-buffering-and-caching


# besoin de definir pour que redirection marche :
>> proxy_set_header HOST $host;
>> proxy_set_header X-Forwarded-Proto "https";


faire proxy_pass https://"nom_du_service:port"
il faut en effet faire le proxy pass en ssl car la requete arrive en ssl et mettre les memes cles publiques
et privees dans tous les containers. Les nginx qui recoivent le proxy doivent ecouter sur le port en ssl
et ensuite faire un fastcgi_pass sur php-fpm7 pour les .php

-------------------------------- ACCEDER NGINX SSH --------------------------------------------
apk add --update openssh >> installe le serveur ssh
ssh-keygen -A >> permet de generer les cles ssh necessaire a son fonctionnement (les hostkeys)
/usr/sbin/sshd >> lance le daemon de ssh
adduser -D user42 >> permet de creer un nouveau user sans password grace a l'option D
echo "user42:user42" | chpasswd >> changer le mdp (echo "user:password")
ssh user@ip >> permet la connexion ssh
!!!! >> penser entre chaque connexion a aller dans ~/.ssh/known_host sur le pc qui tente de se connecter
et supprimer la precedente cle associe au precedent container (ip de minikube du coup)

-------------------------------- PHPMYADMIN --------------------------------------------
penser a dire a php-fpm7 de listen sur le 5000

>>> PROBLEME POUR PHPMYADMIN qvec page blanche >>> decommenter security.limits dans www.conf et ne rien mettre
https://www.digitalocean.com/community/questions/php-fpm-security-limit_extension-issue

>>> Phpmyadmin: There is a mismatch between HTTPS indicated on the server and client.
https://community.centminmod.com/threads/phpmyadmin-there-is-a-mismatch-between-https-indicated-on-the-server-and-client.18930/
la version 5.0.2 de phpmyadmin est bugge avec http/https >> installer la version 4.9.2 et le probleme est resolue
https://www.phpmyadmin.net/files/4.9.2/


>> renseigner dans le fichier config de [host] = 'mysql-service'
>> j'ai suppr mariadb-client dans le pod de phpmyadmin car pas besoin en theorie. semble marcher

-------------------------------- MYSQL ---------------------------------------------------
>>> montrer les databases
SHOW DATABASES;

>>> montrer les tables d'une databse
SHOW TABLES 
[FROM databasename];

>>>> supprimer une databse
drop database 42_ft_services;

>>> Once logged into MySQL, list all MySQL users and their corresponding hosts in your database.
SELECT User,Host FROM mysql.user;

>>> se connecter a distance a mysql avec le client
mysql -u {username} -p'{password}' \
    -h {remote server ip or name} -P {port} \
    -D {DB name}
mysql -u user42 -puser42 -h mysql-service -D 42_ft_services -P 3306

>>> lancer un script sql dans le client 
mysql < script.sql
fonctionne aussi avec les infos de log a distance

donc dans un premier temps installer le server + le client sur le pod mysql
lancer mysqld (le daemon)
lancer un script dans mysql (client) pour creer un user avec tous les droits et sur toutes les ip
renseigner le fichioer de config de my sql dqns my.cnf.d dans /etc/
>>> CREER LE POD MYSQL AVANT LE POD PHPMYADMIN OU wordpress

en localhost root est reserve pour la creation d'instance du programme (pour le daemon et le socket etc
il me semble) >> penser donc a creer un superuser sous un autre nom que root

# comprendre les utilisateurs mysql et les differents droits
https://devanswers.co/mysql-rejecting-correct-password-error-1045-access-denied-for-user-using-password-yes/#understanding-mysql-users-and-hosts


-------------------------------- WORDPRESS ---------------------------------------------------

config wp-config.php avec la database
utiliser wp-cli pour installer automatiquement wordpress. attention l'url doit match exactement lors de wp-cli core install ! 
(https + adresse ip du loadbalancer) >> astuce pour que le loadbalancer ait toujours la meme ip >> range ip de une seule
adresse dans le configmap de metallb

pour wp-cli chopper le bon lien pour telecharger le fichier + installer php7-cli php7-phar

si le wordpress ne charge pas le javascript >> surement un probleme lié à ssl (lors du reverse proxy ou de l'install avec wp-cli
si url renseignée juste en http) !


-------------------------------- INFLUXDB ---------------------------------------------------
# permet de generer un fichier de config pour influxdb
influxd config > influxdb.conf

# influxdb stock ses donnes dans var/lib/influxdb
# penser aussi a lui creer un fichier de config dans /etc/influxdb/

chown influxdb:influxdb /etc/influxdb/*

influxd permet de lancer le daemon
ensuite quand on fait influx, ca permet de lancer le client qui se connecte au daemon et communique
avec lui

# creer un user dans influx
CREATE USER admin WITH PASSWORD 'admin123' WITH ALL PRIVILEGES

# commandes pour le client de influx
https://docs.influxdata.com/influxdb/v1.8/tools/shell/
https://docs.influxdata.com/influxdb/v1.7/query_language/schema_exploration/

# tuto complet sur comment installer influx et grafana
https://thenewstack.io/how-to-setup-influxdb-telegraf-and-grafana-on-docker-part-1/

# tuto inflxdb
https://devconnected.com/how-to-install-influxdb-on-ubuntu-debian-in-2019/#Option_2_Adding_the_repositories_to_your_package_manager

-------------------------------- GRAFANA ---------------------------------------------------
installer a partir des sources binaires sur le site de grafana puis lancer grafana-server qui se situe
dans le dossier bin. penser a installer le package libc6-compat pour eviter l'erreur "grafana-server not found"

# comprendre fichier config grafana
https://grafana.com/docs/grafana/latest/administration/configuration/

# grafana derriere un reverse proxy
https://grafana.com/tutorials/run-grafana-behind-a-proxy/#1

# Grafana-server Init Failed: Could not find config defaults, make sure homepath command line parameter is set or working directory is homepath
https://stackoverflow.com/questions/59931472/unable-to-run-grafana-server-on-local-system
>>> lancer grafana avec l'option homepath

-------------------------------- TELEGRAF ---------------------------------------------------
# besoin d'utiliser le premier fichier yaml de ce site pour donner les droits d'acces a telegraf pour acceder k8s
https://github.com/fabric8io/fabric8/issues/6840

# minikube addons enable metrics-server
necessaire pour que k8s transmette les donnees a telegraf

# Read metrics from the Kubernetes api >>> dans le fichier de config de telegraf ce champ permet de connecter k8s en input
[[inputs.kube_inventory]]
>>> necessaire d'avoir une version asse recente de trelegraf (au moins 1.10 je crois) sinon ce champ n'est pas reconnu

-------------------------------- FTPS ---------------------------------------------------
# installer ftps
https://guide.ubuntu-fr.org/server/ftp-server.html

# comprendre fichier config de vsftpd, daemon de ftps
https://www.digitalocean.com/community/tutorials/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-16-04

# pour tester ftps il faut telecharger filezilla

-------------------------------- LIVENESSPROBE ---------------------------------------------------
a mettre dans les fichiers yaml, permet de restart les containers selon une condition (dans notre cas si pgrep
trouve le nom du processus cherche pour savoir si celui ci est toujours en fonctionnment ou non)

-------------------------------- MINIKUBE DANS LA VM ---------------------------------------------------
https://www.notion.so/Ft_services-VM-852d4f9b0d9a42c1a2de921e4a2ac417
